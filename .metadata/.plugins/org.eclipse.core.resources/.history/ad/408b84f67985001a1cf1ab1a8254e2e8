package test;

import java.util.Collection;
import java.util.*;

public class NumbersConveter implements NumberRangeSummarizer {

	
	public Collection<Integer> collect(String input) {
		
		List<Integer> inputNumbers = new ArrayList<Integer>();
		List<String> inputString = new ArrayList<String>(Arrays.asList(input.split(",")));
		for(int i=0;i<inputString.size();i++) {
			inputNumbers.add(Integer.parseInt(inputString.get(i)));
		}
		Collections.sort(inputNumbers);
		//if(inputNumbers instanceof List<Integer>)
		
		return inputNumbers;
	}

	
	public String summarizeCollection(Collection<Integer> input) {
		

		Iterator<Integer> iter = input.iterator();
		
		StringBuilder sb = new StringBuilder();  
		
		boolean isConsecutive =false;
		int tracker=0;
		int runningVal = 0;
		int counter = iter.next();
		
		sb.append(counter);
		/*for (Integer currentValue : input) {
			if(tracker==0) {
				counter++;
				tracker++;
				continue;
			}
			if((currentValue==counter)&&(isConsecutive)) {
				
				runningVal = currentValue;
				counter++;
				continue;
					
				}
			else if (currentValue==counter) {
					sb.append("-");
					counter++;
					runningVal = currentValue;
					isConsecutive = true;
					continue;
				}
				
			
			else if (currentValue!=counter) {
				if(isConsecutive) {
				sb.append(runningVal);
				
			}
				sb.append(","+ currentValue);
				isConsecutive = false;
				counter=currentValue;
				counter++;
		  }
		  
		

}*/
		while(iter.hasNext()) {
			if(tracker==0) {
				counter++;
				tracker++;
				continue;
			}
			if((iter.next()==counter)&&(isConsecutive)) {
				runningVal = counter;
				counter++;
				continue;
			}
			else if (iter.next()==counter) {
				if(iter.hasNext()) {
					sb.append("-");
					counter++;
					runningVal = iter.next();
					isConsecutive = true;
					continue;
				}
				else {
					sb.append(iter.next());
				}
				
			}
			
		
		else if (iter.next()!=counter) {
			if(isConsecutive) {
			sb.append(runningVal);
			
		}
			sb.append(","+ iter.next());
			isConsecutive = false;
			counter=iter.next();
			counter++;
	  }

			
			
		}
		return sb.toString();
	}
}
